#!/usr/bin/env node
'use strict';

try {
  require('source-map-support').install();
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
}

const {execFileSync} = require('child_process');
const {readFileSync, mkdirSync, symlinkSync} = require('fs');
const {dirname, join, resolve} = require('path');

const ROOT = resolve(__dirname, '..', '..');
const packageJSON = JSON.parse(readFileSync(join(ROOT, 'package.json'), 'utf8'));

const DEPS = ['@pkmn/img', 'html-minifier', 'esbuild'];
const missing = [];
for (const dep of DEPS) {
  try {
    require.resolve(dep);
  } catch (e) {
    if (e.code !== 'MODULE_NOT_FOUND') throw e;
    missing.push(`${dep}@${packageJSON.devDependencies[dep]}`);
  }
}

let Dex = undefined;
try {
  Dex = require('@pkmn/sim').Dex;
} catch (err) {
  if (err.code !== 'MODULE_NOT_FOUND') throw err;
  try {
    Dex = require('@pkmn/dex').Dex;
  } catch (e) {
    if (e.code !== 'MODULE_NOT_FOUND') throw e;
    missing.push(`@pkmn/dex@${packageJSON.dependencies['@pkmn/data']}`);
  }
}

const node_modules = {
  local: execFileSync('npm', ['root'], {encoding: 'utf8'}).trim(),
  global: execFileSync('npm', ['root', '--global'], {encoding: 'utf8'}).trim(),
};

if (missing.length) {
  if (+/^v(\d+)/.exec(process.version)[1] < 16) {
    console.error('pkmn-debug requires Node v16+');
    process.exit(1);
  }

  execFileSync('npm', ['install', ...missing, '--global'], {encoding: 'utf8'});

  if (!process.env.NODE_PATH || !process.env.NODE_PATH.includes(node_modules.global)) {
    const dir = node_modules.global;
    console.error(`NODE_PATH must include npm's global node_modules directory: '${dir}'`);
    process.exit(1);
  }
}

for (const dep of DEPS) {
  const resolved = require.resolve(dep);
  if (resolved.startsWith(node_modules.global)) {
    if (dep.includes('/')) {
      try {
        mkdirSync(join(node_modules.local, dirname(dep)));
      } catch (err) {
        if (err.code !== 'EEXIST') throw err;
      }
    }
    symlinkSync(join(node_modules.global, dep), join(node_modules.local, dep));
  }
}

const {Generations} = require('@pkmn/data');

const {run} = require('../../build/tools/debug');

run(new Generations(Dex)).catch(err => {
  console.error(err.message);
  process.exit(1);
});
